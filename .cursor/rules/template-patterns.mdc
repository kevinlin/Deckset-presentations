---
globs: "templates/**/*.html,templates/**/*.css,templates/**/*.js"
---

# Template & UI Patterns

## Template Structure

### Enhanced Template Engine
The project uses hardcoded Jinja2 templates in `enhanced_templates.py` for rendering:

- **Slide Templates**: Individual slide HTML is generated using string templates
- **Presentation Pages**: Complete presentation HTML with navigation and styling
- **Homepage**: Presentation listing with search and responsive design

### Template Rendering Pattern
```python
# In enhanced_templates.py
def render_slide(self, slide, config):
    template = self.env.from_string(self.slide_template)
    return template.render(slide=slide, config=config)
```

### Key Template Features
- Full Deckset markdown compatibility
- Responsive design with Tailwind CSS
- Background images and media support
- Code highlighting and math formulas

## CSS Framework & Styling

### Tailwind CSS Integration
- Uses Tailwind CSS via CDN for responsive design
- Custom utility classes for presentation-specific styling
- Print styles for presentation printing

### Responsive Design Patterns
```css
/* Mobile-first responsive breakpoints */
@media (max-width: 640px) {
    .slide-content {
        @apply prose-sm;
    }
}

/* Print optimizations */
@media print {
    .no-print {
        display: none;
    }
    .page-break {
        page-break-after: always;
    }
}
```

### Component-Specific Styles
```css
.slide-content {
    @apply prose prose-lg max-w-none;
}

.slide-notes {
    @apply text-gray-600 bg-gray-50 p-4 rounded-lg mt-4;
}
```

## JavaScript Patterns

### Enhanced Slide Viewer
Located in [templates/assets/js/slide-viewer.js](mdc:templates/assets/js/slide-viewer.js):

```javascript
class EnhancedSlideViewer {
    constructor(container) {
        this.container = container;
        this.init();
    }
    
    init() {
        this.setupNavigation();
        this.setupKeyboardHandlers();
        this.setupAccessibility();
    }
}
```

### Event Handling Patterns
```javascript
// Keyboard navigation
document.addEventListener('keydown', (e) => {
    switch(e.key) {
        case 'ArrowRight':
        case ' ':
            this.nextSlide();
            break;
        case 'ArrowLeft':
            this.previousSlide();
            break;
    }
});
```

## Template Data Patterns

### Presentation Context
Templates receive rich context objects:

```python
context = {
    'presentation': enhanced_presentation,
    'slides': processed_slides,
    'config': generator_config,
    'deckset_config': deckset_config,
    'media_files': processed_media,
    'navigation': navigation_data
}
```

### Slide Rendering
```html
{% for slide in slides %}
<div class="slide" data-slide-index="{{ loop.index0 }}">
    <div class="slide-content">
        {{ slide.processed_content | safe }}
    </div>
    
    {% if slide.notes %}
    <div class="slide-notes">
        <h4>Speaker Notes:</h4>
        {{ slide.notes | safe }}
    </div>
    {% endif %}
</div>
{% endfor %}
```

## Accessibility Patterns

### ARIA Support
```html
<nav aria-label="Slide navigation">
    <button aria-label="Previous slide" data-action="prev">←</button>
    <span aria-live="polite">Slide {{ current_slide }} of {{ total_slides }}</span>
    <button aria-label="Next slide" data-action="next">→</button>
</nav>
```

### Keyboard Navigation
- Arrow keys for slide navigation
- Tab navigation for interactive elements  
- Screen reader support for slide content

### Focus Management
```javascript
// Ensure proper focus handling
updateFocus() {
    const currentSlide = this.getCurrentSlide();
    if (currentSlide) {
        currentSlide.focus();
    }
}
```

## Media Integration

### Image Handling
```html
{% if slide.images %}
    {% for image in slide.images %}
    <img src="{{ image.web_path }}" 
         alt="{{ image.alt_text }}"
         class="{{ image.css_classes }}"
         {% if image.modifiers.placement == 'background' %}
         style="background-image: url('{{ image.web_path }}')"
         {% endif %}>
    {% endfor %}
{% endif %}
```

### Video/Audio Support
```html
{% if slide.videos %}
    {% for video in slide.videos %}
    <video controls {% if video.autoplay %}autoplay{% endif %}>
        <source src="{{ video.web_path }}" type="{{ video.mime_type }}">
    </video>
    {% endfor %}
{% endif %}
```

## Performance Patterns

### Asset Optimization
- Favicon and icon management
- Lazy loading for media content
- Optimized CSS delivery

### Caching Headers
```html
<meta name="cache-control" content="public, max-age=3600">
```

## Error Handling in Templates

### Graceful Degradation
```html
{% if presentation.slides %}
    <!-- Render slides -->
{% else %}
    <div class="error-message">
        <p>No slides found in this presentation.</p>
    </div>
{% endif %}
```

### Missing Media Fallbacks
```html
<img src="{{ image.web_path }}" 
     alt="{{ image.alt_text }}"
     onerror="this.style.display='none'">
```

## Template Testing

Templates are tested via:
- [tests/test_enhanced_templates.py](mdc:tests/test_enhanced_templates.py) for Python template logic
- [tests/test_enhanced_slide_viewer.js](mdc:tests/test_enhanced_slide_viewer.js) for JavaScript functionality
- [tests/test_navigation_accessibility.js](mdc:tests/test_navigation_accessibility.js) for accessibility features
description:
globs:
alwaysApply: false
---
